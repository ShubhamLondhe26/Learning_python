Python Operators in general are used to perform operations on values and variables. 
These are standard symbols used for the purpose of logical and arithmetic operations. 
 
#Python divides the operators in the following groups:
1)Arithmetic operators
2)Assignment operators
3)Comparison operators
4)Logical operators
5)Identity operators
6)Membership operators
7)Bitwise operators

OPERATORS: Are the special symbols. Eg- + , * , /, etc.
OPERAND: It is the value on which the operator is applied.

#Arithmetice operators:
Arithmetic operators are used with numeric values to perform common mathematical operations
+	Addition: adds two operands	
â€“	Subtraction: subtracts two operands	
*	Multiplication: multiplies two operands	
/	Division (float): divides the first operand by the second
//	Floor Division: divides the first operand by the second
%	Modulus: returns the remainder when the first operand is divided by the second	
**	Power: Returns first raised to power second	

#Assignment operators:
Assignment operators are used to assign values to variables
=  ---> Assign value
+=	Example:a+=b --->  a=a+b
-=		    a-=b --->  a=a-b
*=		    a*=b --->  a=a*b
/=		    a/=b --->  a=a/b
%=	    	a%=b --->  a=a%b
//=	       a//=b --->  a=a//b
**=	       a**=b --->  a=a**b

#Comparison operators
Comparison operators are used to compare two values
==	    Equal	        x == y	
!=	    Not equal	    x != y	
>	    Greater than	x > y	
<	    Less than	    x < y	
>=	    Greater than or equal to	x >= y	
<=	    Less than or equal to	    x <= y

#Logical Operators
Logical operators are used to combine conditional statements:
and --->Returns True if both statements are true	
or  --->Returns True if one of the statements is true
not	--->Reverse the result, returns False if the result is true

#Identity Operators:
is and is not are the identity operators both are used to check if two values are located on the same part of the memory. Two variables that are equal do not imply that they are identical. 
is      ----> True if the operands are identical 
is not  ----> True if the operands are not identical 

#Membership Operators:
in and not in are the membership operators; used to test whether a value or variable is in a sequence.
in     ----> True if value is found in the sequence
not in ----> True if value is not found in the sequence

#Bitwise Operators:
Bitwise operators act on bits and perform the bit-by-bit operations
& 	AND	--->Sets each bit to 1 if both bits are 1
|	OR	--->Sets each bit to 1 if one of two bits is 1
^	XOR	--->Sets each bit to 1 if only one of two bits is 1
~	NOT	--->Inverts all the bits# x = -(x+1)
<<	Zero fill left shift	
>>	Signed right shift	    